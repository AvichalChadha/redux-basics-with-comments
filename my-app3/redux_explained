
step1 - In action we create a payload which pasically acts as the 
props. 

step2- That payload then goes to the reducer and then it can be passed as the props in the container. Here we also name the payload 

step3- Then it does to the container, where it passes as 'this.props' 

-------------------------------------------------------------------------------------------------------------------------------------------------

									ACTIONS 

return{
	type: ''
	payload: 
}


Basically we somehow need to put all the info in the payload. If we are suing some API or JSON file(which we will probably be using), then we
have to extract all the details from the JSON and pass it as payload 
 ---------------------------------------------------------------------------------------------------------------------------------------

 								REDUCERS 

switch statement will be here 

We will be passing the data from the payload using that switch statement as the state. Reducers also change the state, and that updated state passes to the container. 


------------------------------------------------------------------------------------------------------------------------------------\

							CONTAINERS 

They will be similar to the conponent, but in container file, we will pass the state as 'this.prop.the_new_state_from_reducer

FANCY WORDS USED- mapDispatchToProps, mapStateToProps, connect, bindActionCreator,




So apparently, we don't have to use mapDispatchToProps and mapStateToProps togeter. We might be using one or we might be
using both. It all depends! 
							=========================================================

CASE1 - WHEN WE ARE ONLY USING 'mapStateToProps'

First of all if we use this, it means that we are taking the state from the reducers and then using that state in the container. So oviously if we don't need to pass the state in the container, then we don't fucking use it. 

So the props/data is in the /action/index.js file and 
 




HOW DO WE CONNECT STATE FROM  'reducer/somefile.js' TO 'container' ????

We change the state in the reducer/somefile.js and then pass it to the reducer/index.js file and then it goes to the
container and then using mapStateToProps, we use at 'this.props'




Its format- 

function mapStateToProps({ weather }) {
  return { weather };
}

export default connect(mapStateToProps)(WeatherList);

                               ===========================================================

CASE2 - WHEN WE ARE ONLY USING 'mapDispatchToProps'

This happens when we are passing the actual data from the action creators to the container. 
LETS NOT GET US CONFUSE- We use mapStateToProps, when we want to pass state to the containers. 
In mapDispatchToProps, we are getting the data/props from the action/index.js file and then it goes to the container file
(not directly, we pass it through the reducer, we don't have to write the code for it). There we use it as 'this.props'



I KNOW WHAT YOU ARE FUCKING THINKING, AND IF YOU ARE NOT THEN YOU ARE FUCKED, COZ THIS IS WHAT YOU SHOULD BE FUCKING
THINK---

Yes, we use 'this.props' in both mapStateToProps and mapDispatchToProps. 




ITS FORMAT- 


function mapDispatchToProps(dispatch) {
    return bindActionCreators({ fetchWeather }, dispatch);
  }
  
  export default connect(null, mapDispatchToProps)(SearchBar);


Notice that we are using 'null' because 'export default connect()' takes two argument- mapDispatchToProps and
 mapStateToProps
And if we don't have 'mapStateToProps' to pass, then we will be passing 'null'


								==========================================================
 
--------------------------------------------------------------------------------------------------------------------------------------
						/src/index.js 

FANCY TERMS- 

import { Provider } from 'react-redux';
import { createStore, combineReducers, applyMiddleware } from 'redux'

const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);


 <Provider store={createStoreWithMiddleware(reducers)}>






